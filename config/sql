-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;
CREATE TABLE IF NOT EXISTS public.activities (
    activity_id serial NOT NULL,
    activity_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT activities_pkey PRIMARY KEY (activity_id)
);
CREATE TABLE IF NOT EXISTS public.albums (
    album_id serial NOT NULL,
    album_name character varying COLLATE pg_catalog."default" NOT NULL,
    artist_id integer NOT NULL,
    CONSTRAINT albums_pkey PRIMARY KEY (album_id)
);
CREATE TABLE IF NOT EXISTS public.artists (
    artist_id serial NOT NULL,
    artist_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT artists_pkey PRIMARY KEY (artist_id)
);
CREATE TABLE IF NOT EXISTS public.genres (
    genre_id serial NOT NULL,
    genre_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT genres_pkey PRIMARY KEY (genre_id)
);
CREATE TABLE IF NOT EXISTS public.moods (
    mood_id serial NOT NULL,
    mood_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT moods_pkey PRIMARY KEY (mood_id)
);
CREATE TABLE IF NOT EXISTS public.playlists (
    playlist_id serial NOT NULL,
    playlist_name character varying COLLATE pg_catalog."default" NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT playlists_pkey PRIMARY KEY (playlist_id)
);
CREATE TABLE IF NOT EXISTS public.playlists_songs (
    playlist_id integer NOT NULL,
    song_id integer NOT NULL,
    CONSTRAINT playlist_song_pk PRIMARY KEY (playlist_id, song_id)
);
CREATE TABLE IF NOT EXISTS public.songs (
    song_id serial NOT NULL,
    song_name character varying COLLATE pg_catalog."default" NOT NULL,
    album_id integer NOT NULL,
    genre_id integer NOT NULL,
    weather_id integer NOT NULL,
    activity_id integer NOT NULL,
    mood_id integer NOT NULL,
    song_duration integer NOT NULL,
    CONSTRAINT songs_pkey PRIMARY KEY (song_id)
);
CREATE TABLE IF NOT EXISTS public.users (
    user_id serial NOT NULL,
    user_name character varying COLLATE pg_catalog."default" NOT NULL,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    user_title character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT email_unique UNIQUE (email),
    CONSTRAINT name_unique UNIQUE (user_name)
);
CREATE TABLE IF NOT EXISTS public.weather (
    weather_id serial NOT NULL,
    weather_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT weather_pkey PRIMARY KEY (weather_id)
);
ALTER TABLE IF EXISTS public.albums
ADD CONSTRAINT artist_fk FOREIGN KEY (artist_id) REFERENCES public.artists (artist_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.playlists
ADD CONSTRAINT user_fk FOREIGN KEY (user_id) REFERENCES public.users (user_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.playlists_songs
ADD CONSTRAINT playlist_fk FOREIGN KEY (playlist_id) REFERENCES public.playlists (playlist_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.playlists_songs
ADD CONSTRAINT song_fk FOREIGN KEY (song_id) REFERENCES public.songs (song_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.songs
ADD CONSTRAINT activity_fk FOREIGN KEY (activity_id) REFERENCES public.activities (activity_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.songs
ADD CONSTRAINT album_fk FOREIGN KEY (album_id) REFERENCES public.albums (album_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.songs
ADD CONSTRAINT genre_fk FOREIGN KEY (genre_id) REFERENCES public.genres (genre_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.songs
ADD CONSTRAINT mood_fk FOREIGN KEY (mood_id) REFERENCES public.moods (mood_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
ALTER TABLE IF EXISTS public.songs
ADD CONSTRAINT weather_fk FOREIGN KEY (weather_id) REFERENCES public.weather (weather_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID;
END;